{-# OPTIONS -w #-}
module Hydra.BNFC.AbsHydra where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
newtype HsExpr = HsExpr String deriving (Eq,Ord,Show)
data SigRel =
   SigRel Pattern [Equation]
  deriving (Eq,Ord,Show)

data SigFun =
   SigFun Pattern Expr
  deriving (Eq,Ord,Show)

data Pattern =
   PatWild
 | PatName Ident
 | PatUnit
 | PatPair Pattern Pattern
  deriving (Eq,Ord,Show)

data Equation =
   EquEqual Expr Expr
 | EquInit Expr Expr
 | EquLocal Ident
 | EquSigRelApp HsExpr Expr
  deriving (Eq,Ord,Show)

data Expr =
   ExprOr Expr Expr
 | ExprAnd Expr Expr
 | ExprLt Expr Expr
 | ExprLte Expr Expr
 | ExprGt Expr Expr
 | ExprGte Expr Expr
 | ExprAdd Expr Expr
 | ExprSub Expr Expr
 | ExprDiv Expr Expr
 | ExprMul Expr Expr
 | ExprPow Expr Expr
 | ExprNeg Expr
 | ExprApp Expr Expr
 | ExprVar Ident
 | ExprAnti HsExpr
 | ExprInteger Integer
 | ExprDouble Double
 | ExprUnit
 | ExprPair Expr Expr
  deriving (Eq,Ord,Show)

