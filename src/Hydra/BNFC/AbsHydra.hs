{-# OPTIONS -w #-}
module Hydra.BNFC.AbsHydra where

-- Haskell module generated by the BNF converter


newtype LIdent = LIdent String deriving (Eq,Ord,Show)
newtype HsExpr = HsExpr String deriving (Eq,Ord,Show)
data SigRel =
   SigRel Pattern [Equation]
  deriving (Eq,Ord,Show)

data SigFun =
   SigFun Pattern Expr
  deriving (Eq,Ord,Show)

data Pattern =
   PatternWild
 | PatternName PatternNameQual LIdent
 | PatternTuple [Pattern]
  deriving (Eq,Ord,Show)

data PatternNameQual =
   PatternNameQualEmpty
 | PatternNameQualFlow
  deriving (Eq,Ord,Show)

data Equation =
   EquationEqual Expr Expr
 | EquationInit Expr Expr
 | EquationLocal LIdent [LIdent]
 | EquationConnect LIdent LIdent [LIdent]
 | EquationConnectFlow LIdent LIdent [LIdent]
 | EquationSigRelApp HsExpr Expr
  deriving (Eq,Ord,Show)

data Expr =
   ExprOr Expr Expr
 | ExprAnd Expr Expr
 | ExprLt Expr Expr
 | ExprLte Expr Expr
 | ExprGt Expr Expr
 | ExprGte Expr Expr
 | ExprAdd Expr Expr
 | ExprSub Expr Expr
 | ExprDiv Expr Expr
 | ExprMul Expr Expr
 | ExprPow Expr Expr
 | ExprNeg Expr
 | ExprApp Expr Expr
 | ExprVar LIdent
 | ExprAnti HsExpr
 | ExprInt Integer
 | ExprReal Double
 | ExprTuple [Expr]
  deriving (Eq,Ord,Show)

