entrypoints SigRel, SigFun;

SigRel. SigRel ::= Pattern "->" "{" [Equation] "}" ;

SigFun. SigFun ::= Pattern "->" "{" Expr       "}" ;

PatWild. Pattern ::= "_" ;
PatName. Pattern ::= Ident ;
PatUnit. Pattern ::= "()" ;
PatPair. Pattern ::= "(" Pattern "," Pattern ")" ;

EquEqual.     Equation ::=        Expr "=" Expr ;
EquInit.      Equation ::= "init" Expr "=" Expr ;
EquLocal.     Equation ::= "local" Ident;
EquSigRelApp. Equation ::= HsExpr "<>" Expr ;

ExprAdd.     Expr1 ::= Expr1 "+"  Expr2 ;
ExprSub.     Expr1 ::= Expr1 "-"  Expr2 ;
ExprDiv.     Expr2 ::= Expr2 "/"  Expr3 ;
ExprMul.     Expr2 ::= Expr2 "*"  Expr3 ;
ExprPow.     Expr3 ::= Expr3 "^"  Expr4 ;
ExprNeg.     Expr3 ::= "-" Expr4 ;
ExprApp.     Expr4 ::= Expr4 Expr5 ;
ExprVar.     Expr5 ::= Ident ;
ExprAnti.    Expr5 ::= HsExpr ;
ExprInteger. Expr5 ::= Integer ;
ExprDouble.  Expr5 ::= Double ;
ExprUnit.    Expr5 ::= "()" ;
ExprPair.    Expr5 ::= "(" Expr "," Expr ")" ;
_.           Expr  ::= Expr1 ;
_.           Expr1 ::= Expr2 ;
_.           Expr2 ::= Expr3 ;
_.           Expr3 ::= Expr4 ;
_.           Expr4 ::= Expr5 ;
_.           Expr5 ::= "(" Expr ")" ;

separator Equation ";" ;

comment "--" ;
comment "{-" "-}" ;

token HsExpr ('$' (char - '$')* '$') ;

layout "->" ;