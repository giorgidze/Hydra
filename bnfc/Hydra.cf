entrypoints SigRel, SigFun;

SigRel. SigRel ::= Pattern "->" "{" [Equation] "}" ;

SigFun. SigFun ::= Pattern "->" "{" Expr "}" ;

PatternWild.     Pattern ::= "_" ;
PatternName.     Pattern ::= PatternNameQual LIdent ;
PatternTuple.    Pattern ::= "(" [Pattern] ")" ;
separator        Pattern "," ;

PatternNameQualEmpty.  PatternNameQual ::= ;
PatternNameQualFlow.   PatternNameQual ::= "flow" ;

EquationEqual.       Equation ::= Expr "=" Expr ;
EquationInit.        Equation ::= "init"   Expr "=" Expr ;
EquationLocal.       Equation ::= "local" LIdent [LIdent];
EquationConnect.     Equation ::= "connect" LIdent LIdent [LIdent] ;
EquationConnectFlow. Equation ::= "connect" "flow" LIdent LIdent [LIdent] ;
EquationSigRelApp.   Equation ::= HsExpr "<>" Expr ;
separator            Equation ";" ;
separator            LIdent "" ;

ExprOr.      Expr1 ::= Expr1 "||" Expr2 ;
ExprAnd.     Expr2 ::= Expr2 "&&" Expr3 ;
ExprLt.      Expr3 ::= Expr4 "<"  Expr4 ;
ExprLte.     Expr3 ::= Expr4 "<=" Expr4 ;
ExprGt.      Expr3 ::= Expr4 ">"  Expr4 ;
ExprGte.     Expr3 ::= Expr4 ">=" Expr4 ;
ExprAdd.     Expr4 ::= Expr4 "+" Expr5 ;
ExprSub.     Expr4 ::= Expr4 "-" Expr5 ;
ExprDiv.     Expr5 ::= Expr5 "/" Expr6 ;
ExprMul.     Expr5 ::= Expr5 "*" Expr6 ;
ExprPow.     Expr6 ::= Expr6 "^" Expr7 ;
ExprNeg.     Expr6 ::= "-" Expr7 ;
ExprApp.     Expr7 ::= Expr7 Expr8 ;
ExprVar.     Expr8 ::= LIdent ;
ExprAnti.    Expr8 ::= HsExpr ;
ExprInt.     Expr8 ::= Integer ;
ExprReal.    Expr8 ::= Double ;
ExprTuple.   Expr8 ::= "(" [Expr] ")" ; 
_.           Expr  ::= Expr1 ;
_.           Expr1 ::= Expr2 ;
_.           Expr2 ::= Expr3 ;
_.           Expr3 ::= Expr4 ;
_.           Expr4 ::= Expr5 ;
_.           Expr5 ::= Expr6 ;
_.           Expr6 ::= Expr7 ;
_.           Expr7 ::= Expr8 ;
separator    Expr "," ;

comment "--" ;
comment "{-" "-}" ;

token LIdent ((lower | '_') (letter | digit | '_')*) ;
token HsExpr ('$' (char - '$')* '$') ;

-- layout toplevel ;
layout "->" ;
-- layout stop "in"